Group: CS3398 F19 Kree
Below is the analysis for each file. Additionally, the author for each file analysis is noted as well.

---------------------------------------------------------------------------

File: ThreeSolidMain.java
Author(s): David Kim, Sam Pugh

Open/Close principle:
  - This principal does not apply to this file because the main function is static and hence all of the methods are not inherited because the child class will have not access to the variables and methods defined within the class. 
  
Single responsibility principle:
  - This class follows this principal because the main class is only responsible for calling the object methods and 
performing IO related operations. It does not perform any of the calculations that are to be outputted. These are 
handled in the Classes themselves. 
  
Interface segregation principle:
  - This Rule Does not apply as the main class does not have any interfaces that it implements or defines. 
---------------------------------------------------------------------------

File: Manager.java
Author(s): Jesse Munoz

Open/Close principle:
  - This class follows the open/close principle since the class can be extended to a more specific class. 
You can create these more specific classes to allow for extension rather than modifiying the code for every change needed.
  
Single responsibility principle:
  - This class follows this principle since Manager is responsible for setting the workers and managing 
them based on what kind of worker they are.

Interface segregation principle:
  - This class follows this principle since the class implements IManage and uses the IWorker interfaces that
perform different functions and do not overlap.

---------------------------------------------------------------------------

File: Worker.java, SuperWorker.java
Author(s): David Kim, Shelby Jordan

Open/Close principle:
  - Since both classes implements IWorker, the Worker class does not need any modification if any changes have to be made. 
 If changes need to be made, instead of continuously modifying the class, changes can be made by extending the class.  

Single responsibility principle: 
  - the 2 classes follow the principle because it is only responsible for making sure the worker eats and works.

Interface segregation principle: 
  - The classes implement the two methods from IWorker which is a specialized interface for living workers. If
this class is extended, the interface segregation principle will not be violated so long as the child classes are
workers that are alive. If a child class were to be made and not need one of the methods, then that child class
should instead implement the IWork or IEat interfaces seperately; creating a child class that is not living would
be an improper use of this class. That being noted, this class adheres to the interface segregation principle.  

---------------------------------------------------------------------------

File: Robot.java
Author(s): Sam Pugh, Ben Kownacki

Open/Close principle:
  - The Robot class implements an interface, but is still open to extension. Say we were requested to build an android class to supplement the robot. This class can extend the robot class and add additional methods without modifying the code in the robot class.

Single responsibility principle:
  - This class follows this principle since Manager is responsible for setting the workers and managing 
them based on what kind of worker they are.

Interface segregation principle:
  - the Robot class implements the IWork interface which explicitly grants the method Work for this file. This interface implementation has limited scope and is segregated from the other functions of the code that the  Robot does not need such as eating. 
  
--------------------------------------------------------------------------

Files: IEat.java, IWork.java,  
Author(s): David Kim, Shelby Jordan, Sam Pugh
  
Open/Close principle:
    - These files are interfaces and therefore cannot be extended by a class, it can only be extended by a fellow 
interface. IWorker.java extends the IWork and IEat interface to allow its methods to be seen by the IWorker 
interface, but the interfaces themselves are separate allowing easier modular maintenance and modification and 
allows new features to be added without modifying any of the existing code by extending the interface and adding
code on top of the methods that already exist.
    
Single responsibility principle:
    - These interfaces are only responsible for defining one method and do not have any other methods within it. 
Therefore their scope is limited to eating/working and hence adheres to the principal.
   
Interface segregation principle:
    - Each of these interfaces has well defined and different jobs without overlapping code or responsibility. 
For example, the IEat class only eats and the IWork class only works. Since there is no overlap or additional 
operations performed by the interface, it adheres to this principal. 
    

---------------------------------------------------------------------------

File: IDrect.java
Author(s): Shelby Jordan

Open/Close principle: - The IDirect interface is set up so that it can be extended by other interfaces, or
implemented in a class. The interface has a single method. The reason it was separated this way is explained in the
interface segregation section below. As it exists now, this interface adheres to the Open/Close principle.

Single responsibility principle: - This interface tackles an abstract concept, directing, and the only requirement
so far for such an abstract concept is to direct a worker/person/robot to do something. It was separated this way
from the IManage interface because directing is not always the same as managing something/someone; Giving directions
for a task and ensuring the entity completes the task are 2 different responsibilities. That being said, this
interface follows the single responsibility principle. 

Interface segregation principle: - As noted above, this inteface deals with a high level abstract concept, therefore
any changes to this interface should also be applicable to the child interfaces. There are many types of directing
roles from manager to supervisor to CEO. Because this interface follows an abstract concept and should only be
extended, it follows the interface segregation principle. If there was to be a change in the features of this
interface, as long as the change follows the other SOLID principles, the change should be easily adaptable to child
interfaces.
--------------------------------------------------------------------------

File: IManage.java,
Author(s): Shelby Jordan

Open/Close principle: - The IManage interface is formatted in such a way as to allow for extending. It technically
can be modified but should not so that the SOLID principles are respected. This interface extends the IDirect
interface and if a new specific type of manager needs to be created, this interface can be extended without having
to modify any existing interfaces. It therefore adheres to the Open/Close principle.

Single responsibility principle: - The responsiblities of this interface are the only ones it should have; there are
no roles/responsibilites in this interface that should belong to another. Thus, this interface follows the single
responsiblity principle.

Interface segregation principle: - This interface is a nice example of the interface segregation principle at work.
Instead of having the parent interface add a new method, "manage()", the IManage interface extends IDirect
and then adds its own manage() method. This keeps any classes/interfaces that would implement/extend IDirect from
having an unecessary manage() methos. Therefore this interface follows the interface segregation principle.
--------------------------------------------------------------------------


File: IWorker.java
Author(s): David Kim, Sam Pugh, Shelby Jordan

Open/Close principle:
    - Just like IManage, this interface extends from other interfaces to produce a specialized interface. It is
structured so that it may be extended to by another interface if a new feature needs to be added. Therefore, this
file follows the Open/Close principle.
    
Single responsibility principle:
    - This interface inherits methods that this interface only needs. Also, there is only one reason for change, 
if a robot/machine were to replace a human worker, so this interface adheres this principle.
    
Interface segregation principle:
    - Splitting this interface with IEat and IWork allows new classes to not implement any of the methods that they 
will not use. This interface adheres to this principal.





