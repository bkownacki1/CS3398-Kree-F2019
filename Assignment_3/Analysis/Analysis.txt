Group: CS3398 F19 Kree
Below is the analysis for each file. Additionally, the author for each file analysis is noted as well.

---------------------------------------------------------------------------

File: ThreeSolidMain.java
Author(s): David Kim, Sam Pugh

Open/Close principle:
  - This principal does not apply to this file because the main function is static and hence all of the methods are not
inherited because the child class will have not access to the variables and methods defined within the class. 
  
Single responsibility principle:
  - This class follows this principal because the main class is only responsible for calling the object methods and 
performing IO related operations. It does not perform any of the calculations that are to be outputted. These are 
handled in the Classes themselves. 
  
Interface segregation principle:
  - This Rule Does not apply as the main class does not have any interfaces that it implements or defines. 
---------------------------------------------------------------------------

File: Manager.java
Author(s): Jesse Munoz

Open/Close principle:
  - This class follows the open/close principle since the class can be extended to a more specific class. 
You can create these more specific classes to allow for extension rather than modifiying the code for every change needed.
  
Single responsibility principle:
  - This class follows this principle since Manager is responsible for setting the workers and managing 
them based on what kind of worker they are.

Interface segregation principle:
  - This class follows this principle since the class implements IControl and IWorker interfaces that perform 
different functions and do not overlap.

---------------------------------------------------------------------------

File: Worker.java, SuperWorker.java
Author(s):

Open/Close principle:
  - Since both classes implements IWorker, the Worker class does not need any modification if any changes have to be made. 
 If changes need to be made, instead of continuously modifying the class, changes can be made by extending the class.  

Single responsibility principle: 
  - the 2 classes follow the principle because it is only responsible for making sure the worker eats and works.

Interface segregation principle: 
  - The 2 classes violate the principle because since the class is implementing IWork and IEat, it has to implement the methods in that interface. So if a non human worker were to replace a human worker, the robot will the method eat which it will never use.    

---------------------------------------------------------------------------

File: Robot.java
Author(s):

Open/Close principle:
  - The Robot class implements an interface, but is still open to extension. Say we were requested to build an android class to supplement the robot. This class can extend the robot class and add additional methods without modifying the code in the robot class.

Single responsibility principle:
  - This class follows this principle since Manager is responsible for setting the workers and managing 
them based on what kind of worker they are.

Interface segregation principle:
  - the Robot class implements the IWork interface which explicitly grants the method Work for this file. This interface implementation has limited scope and is segregated from the other functions of the code that the  Robot does not need such as eating. 
  
--------------------------------------------------------------------------

Files: IEat.java, IWork.java, IDrect.java, IManage.java, 
Author(s): David Kim, Shelby Jordan, Sam Pugh
  
Open/Close principle:
    - These files are interfaces and therefore cannot be extended by a class, it can only be extended by a fellow 
interface. IWorker.java extends the IWork and IEat interface to allow its methods to be seen by the IWorker 
interface, but the interfaces themselves are separate allowing easier modular maintenance and modification and 
allows new features to be added without modifying any of the existing code by extending the interface and adding
code on top of the methods that already exist. 
    
Single responsibility principle:
    - These interfaces are only responsible for defining one method and do not have any other methods within it. 
Hence their scope is limited to eating/working/managing/directing and hence adheres to the principal.
   
Interface segregation principle:
    - Each of these interfaces has well defined and different jobs without overlapping code or responsibility. 
For example, the IEat class only eats and the IWork class only works. Since there is no overlap or additional 
operations performed by the interface, it adheres to this principal. 
    - Furthermore, the IManage and IDirect interfaces were seperated as such because there are many roles
within organizations that have the responsibilities of one or both roles. This allows for the responsibilities
of each interface to be implemented seperately between different classes.

---------------------------------------------------------------------------

File: IControl.java
Author(s): Shelby Jordan, Sam Pugh

Open/Close principle: - The IDirect and IManage interfaces are extended in the IControl interface. As such, the
interface cannot be extended again due to restrictions in Java. That being noted, this interface is not applicable
to the Open/Close principle. It can however add other interfaces to the list of extended interfaces

Single responsibility principle: -This interface extends methods from IDirect and IManage which are methods that the
control interface needs to operate. As it is, the interface is

Interface segregation principle:
--------------------------------------------------------------------------

File: IWorker.java
Author(s): David Kim, Sam Pugh

Open/Close principle:
    - This Interface extends 2 additional interfaces and due to the rules of java inheritance, this interface cannot 
be extended for a 2nd time due to single inheritance. So this principal does not apply to this class. 
    
Single responsibility principle:
    - This interface inherits methods that this interface only needs. Also, there is only one reason for change, 
if a robot/machine were to replace a human worker, so this interface adheres this principle.
    
Interface segregation principle:
    - Splitting this interface with IEat and IWork allows new classes to not implement any of the methods that they 
will not use. This interface adheres to this principal.





